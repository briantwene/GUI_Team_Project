/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Views;

import Components.VehicleItem;
import Controller.RouterController;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import models.AppModel;
import models.FilterModel;
import models.VehicleModel;

/**
 *
 * @author twene
 */
public class RentalsView extends javax.swing.JPanel {

    public FilterModel currentFilter = new FilterModel(300, 50, 20);
    private ArrayList<VehicleModel> vehicleList = new ArrayList<VehicleModel>();
    public ArrayList<VehicleModel> filteredVehicleList;
    RouterController controller;
    AppModel appState;
    Runnable filterVehicles = () -> this.filter();

    /**
     * Creates new form Rentals
     */
    public RentalsView(AppModel appState, RouterController controller) {
        this.controller = controller;
        this.appState = appState;
        //create components
        initComponents();
        getDataFromDB();

        //get vehicles
        filteredVehicleList = vehicleList;
   
        this.add();

        filterBar1.attachFilterFunc(filterVehicles);
        //attach filter model to the filter form
        filterBar1.attachFilterModel(currentFilter);

    }
    
    public void initFilter(){
    filterBar1.attachFilterFunc(filterVehicles);
        //attach filter model to the filter form
        filterBar1.attachFilterModel(currentFilter);
    }

    public void addItems(VehicleModel data) {

        VehicleItem item = new VehicleItem(appState, controller);

        item.fillData(data);
       

        wrapLayoutContainer1.add(item);
        wrapLayoutContainer1.revalidate();

    }

    public void remove() {
        wrapLayoutContainer1.removeAll();
        wrapLayoutContainer1.repaint();
    }

    public void add() {

        //remove all the items...
        for (int i = 0; i < filteredVehicleList.size(); i++) {

            this.addItems(filteredVehicleList.get(i));
        }
    }

    public void getDataFromDB() {

        vehicleList.add(new VehicleModel("Land Rover Discovery", "Ultra", 120,
                new ImageIcon(getClass().getResource("/images/car.png")), 7, "large"));
        vehicleList.add(new VehicleModel("Kia Picanto", "Budget", 85,
                new ImageIcon(getClass().getResource("/images/kia.jpg")), 5, "small"));
        vehicleList.add(new VehicleModel("Ford Focus", "Premium", 99,
                new ImageIcon(getClass().getResource("/images/ford.jpg")), 5, "medium"));
        vehicleList.add(new VehicleModel("Toyota Corrola", "Standard", 60,
                new ImageIcon(getClass().getResource("/images/toyota.png")), 5, "medium"));

    }

    public void filter() {
        filteredVehicleList = filterVehicleData();
        this.remove();
        this.add();

    }

    public ArrayList<VehicleModel> filterVehicleData() {

        //create new array to populate
        ArrayList<VehicleModel> newList = new ArrayList<VehicleModel>();
        System.out.println(currentFilter);

        ArrayList<String> type = currentFilter.getTypes();
        ArrayList<String> sizes = currentFilter.getCarSize();

        //then check the criteria based off this
        // filter based on criteria
        for (int i = 0; i < vehicleList.size(); i++) {

            VehicleModel vehicle = vehicleList.get(i);

            int maxPrice = currentFilter.getPrice();

            //check what parts of the filters are active
            if (currentFilter.activeFilters.contains("type") && currentFilter.activeFilters.contains("size")) {

                if (type.contains(vehicle.getCategory()) && sizes.contains(vehicle.getSize()) && vehicle.getPrice() <= maxPrice) {

                    newList.add(vehicle);
                }

            } else if (currentFilter.activeFilters.contains("type")) {

                if (type.contains(vehicle.getCategory()) && vehicle.getPrice() <= maxPrice) {

                    newList.add(vehicle);
                }

            } else if (currentFilter.activeFilters.contains("size")) {

                if (sizes.contains(vehicle.getSize()) && vehicle.getPrice() <= maxPrice) {

                    newList.add(vehicle);
                }

            } else {
                if (vehicle.getPrice() <= maxPrice) {

                    newList.add(vehicle);
                }
            }

        }

        return newList;
    }

    ;
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        content = new javax.swing.JPanel();
        filterBar1 = new Components.FilterBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        wrapLayoutContainer1 = new Components.WrapLayoutContainer();

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Car Type");

        setPreferredSize(new java.awt.Dimension(1440, 918));

        javax.swing.GroupLayout contentLayout = new javax.swing.GroupLayout(content);
        content.setLayout(contentLayout);
        contentLayout.setHorizontalGroup(
            contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        contentLayout.setVerticalGroup(
            contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 918, Short.MAX_VALUE)
        );

        jScrollPane1.setBorder(null);

        wrapLayoutContainer1.setBackground(new java.awt.Color(242, 255, 255));
        jScrollPane1.setViewportView(wrapLayoutContainer1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(filterBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1060, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(content, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(content, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(filterBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 918, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 918, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel content;
    private Components.FilterBar filterBar1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private Components.WrapLayoutContainer wrapLayoutContainer1;
    // End of variables declaration//GEN-END:variables
}
