/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Views;

import Components.VehicleItem;
import Controller.RouterController;
import Controller.UpdateInterface;
import java.util.ArrayList;
import main.Utils;
import models.AppModel;
import models.FilterModel;
import models.VehicleDAO;
import models.VehicleModel;

/**
 *
 * @author twene
 */
public class PurchaseView extends javax.swing.JPanel implements UpdateInterface {

    public FilterModel currentFilter = new FilterModel(300000, 5000, 10000);
    private ArrayList<VehicleModel> vehicleList;
    public ArrayList<VehicleModel> filteredVehicleList;
    RouterController controller;
    public Utils utilityClass;
    AppModel appState;
    VehicleDAO vehicleDao;
    Runnable filterVehicles = () -> this.filter();

    /**
     * Creates new form Purchases
     */
    public PurchaseView(AppModel appState, RouterController controller, VehicleDAO vehicleDao) {
        this.controller = controller;
        this.appState = appState;
        this.vehicleDao = vehicleDao;
        this.utilityClass = new Utils();

        // create components
        initComponents();
        getDataFromDB();

        // get vehicles
        filteredVehicleList = vehicleList;

        this.add();

        filterBar1.attachFilterFunc(filterVehicles);
        // attach filter model to the filter form
        filterBar1.attachFilterModel(currentFilter);

    }

    public void initFilter() {
        filterBar1.attachFilterFunc(filterVehicles);
        // attach filter model to the filter form
        filterBar1.attachFilterModel(currentFilter);
    }

    public void addItems(VehicleModel data) {

        VehicleItem item = new VehicleItem(appState, controller);

        item.fillData(data);

        wrapLayoutContainer1.add(item);
        wrapLayoutContainer1.revalidate();

    }

    public void remove() {
        wrapLayoutContainer1.removeAll();
        wrapLayoutContainer1.repaint();
    }

    public void add() {

        // remove all the items...
        for (int i = 0; i < filteredVehicleList.size(); i++) {

            this.addItems(filteredVehicleList.get(i));
        }
    }

    public void getDataFromDB() {

        vehicleList = vehicleDao.getAll();

    }

    public void filter() {
        filteredVehicleList = Utils.filterVehicleData(currentFilter, vehicleList, "purchases");
        this.remove();
        this.add();

    }

    @Override
    public void updatePage() {

    }

    // public ArrayList<VehicleModel> filterVehicleData() {
    //
    // //create new array to populate
    // ArrayList<VehicleModel> newList = new ArrayList<VehicleModel>();
    // System.out.println(currentFilter);
    //
    // ArrayList<String> type = currentFilter.getTypes();
    // ArrayList<String> sizes = currentFilter.getCarSize();
    //
    // //then check the criteria based off this
    // // filter based on criteria
    // for (int i = 0; i < vehicleList.size(); i++) {
    //
    // VehicleModel vehicle = vehicleList.get(i);
    //
    // int maxPrice = currentFilter.getPrice();
    //
    // //check what parts of the filters are active
    // if (currentFilter.activeFilters.contains("type") &&
    // currentFilter.activeFilters.contains("size")) {
    //
    // if (type.contains(vehicle.getCategory()) && sizes.contains(vehicle.getSize())
    // && vehicle.getPrice() <= maxPrice) {
    //
    // newList.add(vehicle);
    // }
    //
    // } else if (currentFilter.activeFilters.contains("type")) {
    //
    // if (type.contains(vehicle.getCategory()) && vehicle.getPrice() <= maxPrice) {
    //
    // newList.add(vehicle);
    // }
    //
    // } else if (currentFilter.activeFilters.contains("size")) {
    //
    // if (sizes.contains(vehicle.getSize()) && vehicle.getPrice() <= maxPrice) {
    //
    // newList.add(vehicle);
    // }
    //
    // } else {
    // if (vehicle.getPrice() <= maxPrice) {
    //
    // newList.add(vehicle);
    // }
    // }
    //
    // }
    //
    // return newList;
    // }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filterBar1 = new Components.FilterBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        wrapLayoutContainer1 = new Components.WrapLayoutContainer();

        setPreferredSize(new java.awt.Dimension(1440, 918));

        jScrollPane1.setBorder(null);
        jScrollPane1.setViewportView(wrapLayoutContainer1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, 0)
                                .addComponent(filterBar1, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1053, Short.MAX_VALUE)
                                .addGap(0, 0, 0)));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, 0)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(filterBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 918,
                                                Short.MAX_VALUE)
                                        .addComponent(jScrollPane1))
                                .addGap(0, 0, 0)));
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private Components.FilterBar filterBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private Components.WrapLayoutContainer wrapLayoutContainer1;
    // End of variables declaration//GEN-END:variables
}
